<?php

namespace Gecche\Cupparis\App\Geografiche\Models;

use Gecche\Cupparis\App\Breeze\Breeze;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\DB;

/**
 * Breeze (Eloquent) model for T_PROVINCIA table.
 */
class CupGeoProvincia extends Breeze
{
	use Relations\ProvinciaRelations;


    
//    use ModelWithUploadsTrait;

    protected $table = 'T_PROVINCIA';

    protected $guarded = ['id'];

    public $timestamps = false;
    public $ownerships = false;

    public $appends = [

    ];


    public static $relationsData = [

			'regione' => [self::BELONGS_TO, 'related' => Regione::class, 'table' => 'T_REGIONE', 'foreignKey' => 'T_REGIONE_ID'],
			'area' => [self::BELONGS_TO, 'related' => Area::class, 'table' => 'T_AREA', 'foreignKey' => 'T_AREA_ID'],
            'comuni' => array(self::HAS_MANY, 'related' => Comune::class, 'table' => 'T_COMUNE','foreignKey' => 'provincia_id'),
            'operatore' => [self::BELONGS_TO, 'related' => User::class, 'table' => 'users', 'foreignKey' => 'user_id'],


//        'belongsto' => array(self::BELONGS_TO, Provincia::class, 'foreignKey' => '<FOREIGNKEYNAME>'),
//        'belongstomany' => array(self::BELONGS_TO_MANY, Provincia::class, 'table' => '<TABLEPIVOTNAME>','pivotKeys' => [],'foreignKey' => '<FOREIGNKEYNAME>','otherKey' => '<OTHERKEYNAME>') ,
//        'hasmany' => array(self::HAS_MANY, Provincia::class, 'table' => '<TABLENAME>','foreignKey' => '<FOREIGNKEYNAME>'),
    ];

    public static $rules = [
//        'username' => 'required|between:4,255|unique:users,username',
    ];

    public $columnsForSelectList = ['T_PROVINCIA_DESC'];
     //['id','descrizione'];

    public $defaultOrderColumns = ['T_PROVINCIA_DESC' => 'ASC', ];
     //['cognome' => 'ASC','nome' => 'ASC'];

    public $columnsSearchAutoComplete = ['T_PROVINCIA_DESC'];
     //['cognome','denominazione','codicefiscale','partitaiva'];

    public $nItemsAutoComplete = 20;
    public $nItemsForSelectList = 100;
    public $itemNoneForSelectList = false;
    public $fieldsSeparator = ' - ';


    public function save(array $options = [])
    {

        $oldRegioneId = $this->getOriginal('T_REGIONE_ID');
        $newRegioneId = $this->T_REGIONE_ID;

        if ($oldRegioneId !== $newRegioneId) {
            $regione = Regione::find($this->T_REGIONE_ID);
            if ($regione && $regione->getKey()) {
                $this->T_AREA_ID = $regione->T_AREA_ID;
            }
        }

        $saved = parent::save($options); // TODO: Change the autogenerated stub

        if ($saved && $oldRegioneId !== $newRegioneId) {
            DB::table('T_ANAGIST')
                ->where('T_PROVINCIA_ID',$this->getKey())
                ->update(['T_REGIONE_ID' => $newRegioneId, 'T_AREA_ID' => $this->T_AREA_ID]);
        }

        return $saved;

    }
}
